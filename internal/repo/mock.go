// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/database.go

// Package repo is a generated GoMock package.
package repo

import (
	model "BattlesnakeReptarium/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateGame mocks base method.
func (m *MockDB) CreateGame(ctx context.Context, game model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockDBMockRecorder) CreateGame(ctx, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockDB)(nil).CreateGame), ctx, game)
}

// GetGame mocks base method.
func (m *MockDB) GetGame(ctx context.Context, id string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", ctx, id)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockDBMockRecorder) GetGame(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockDB)(nil).GetGame), ctx, id)
}

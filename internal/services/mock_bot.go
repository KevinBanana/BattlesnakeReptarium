// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/bot.go

// Package services is a generated GoMock package.
package services

import (
	model "BattlesnakeReptarium/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBot is a mock of Bot interface.
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot.
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance.
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// CalculateMove mocks base method.
func (m *MockBot) CalculateMove(ctx context.Context, game model.Game, turn int, board model.Board, self model.Snake) (model.SnakeAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateMove", ctx, game, turn, board, self)
	ret0, _ := ret[0].(model.SnakeAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateMove indicates an expected call of CalculateMove.
func (mr *MockBotMockRecorder) CalculateMove(ctx, game, turn, board, self interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateMove", reflect.TypeOf((*MockBot)(nil).CalculateMove), ctx, game, turn, board, self)
}
